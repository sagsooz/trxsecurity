"use client"

import { useState } from "react"
import Link from "next/link"
import { Copy, Check, Download, ArrowLeft, AlertTriangle, Globe, Tag, FileCode } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Separator } from "@/components/ui/separator"
import type { Exploit } from "@/lib/exploits-data"

interface ExploitDetailProps {
  exploit: Exploit
}

export default function ExploitDetail({ exploit }: ExploitDetailProps) {
  const [copied, setCopied] = useState(false)

  const copyToClipboard = () => {
    navigator.clipboard.writeText(exploit.code)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const downloadExploit = () => {
    // Create a blob with the exploit code
    const blob = new Blob([exploit.code], { type: "text/plain" })

    // Create a temporary link element
    const link = document.createElement("a")
    link.href = URL.createObjectURL(blob)

    // Generate a filename based on the exploit title
    const filename = exploit.title
      .toLowerCase()
      .replace(/[^\w\s-]/g, "") // Remove special characters
      .replace(/\s+/g, "-") // Replace spaces with hyphens
      .concat(".txt")

    link.download = filename

    // Trigger the download
    document.body.appendChild(link)
    link.click()

    // Clean up
    document.body.removeChild(link)
    URL.revokeObjectURL(link.href)
  }

  const getTypeColor = (type: string): string => {
    switch (type) {
      case "remote":
        return "text-red-400 border-red-400"
      case "local":
        return "text-amber-400 border-amber-400"
      case "webapps":
        return "text-blue-400 border-blue-400"
      case "dos":
        return "text-purple-400 border-purple-400"
      case "shellcode":
        return "text-green-400 border-green-400"
      default:
        return "text-gray-400 border-gray-400"
    }
  }

  const getTypeDescription = (type: string): string => {
    switch (type) {
      case "remote":
        return "Remote exploits can be executed from outside the target system and do not require prior access."
      case "local":
        return "Local exploits require prior access to the vulnerable system and typically elevate privileges."
      case "webapps":
        return "Web application exploits target vulnerabilities in web-based software."
      case "dos":
        return "Denial of Service exploits cause systems or services to become unavailable."
      case "shellcode":
        return "Shellcode is a small piece of code used as the payload in the exploitation of software vulnerabilities."
      default:
        return ""
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center mb-4">
        <Link
          href="/exploits"
          className="font-mono text-gray-400 hover:text-[#00ff9d] transition-colors flex items-center mr-4"
        >
          <ArrowLeft className="mr-1 h-4 w-4" />
          Back to Exploits
        </Link>
      </div>

      <Card className="bg-[#1a1a1a] border-[#2a2a3a]">
        <CardHeader className="pb-2">
          <div className="flex flex-wrap gap-2 mb-2">
            <Badge variant="outline" className={`font-mono ${getTypeColor(exploit.type)}`}>
              {exploit.type.toUpperCase()}
            </Badge>
            {exploit.cve ? (
              <Badge variant="outline" className="font-mono text-[#00b8ff] border-[#00b8ff]">
                {exploit.cve}
              </Badge>
            ) : (
              <Badge variant="outline" className="font-mono text-gray-400 border-gray-400">
                No CVE
              </Badge>
            )}
            {exploit.verified && (
              <Badge variant="outline" className="font-mono text-green-400 border-green-400">
                Verified
              </Badge>
            )}
          </div>
          <CardTitle className="text-2xl font-bold font-mono text-[#00ff9d]">{exploit.title}</CardTitle>
        </CardHeader>

        <CardContent className="pt-2">
          <Tabs defaultValue="details" className="w-full">
            <TabsList className="grid w-full grid-cols-3 bg-[#0a0a0c] mb-6">
              <TabsTrigger
                value="details"
                className="font-mono data-[state=active]:bg-[#2a2a3a] data-[state=active]:text-[#00ff9d]"
              >
                Details
              </TabsTrigger>
              <TabsTrigger
                value="code"
                className="font-mono data-[state=active]:bg-[#2a2a3a] data-[state=active]:text-[#00ff9d]"
              >
                Exploit Code
              </TabsTrigger>
              <TabsTrigger
                value="references"
                className="font-mono data-[state=active]:bg-[#2a2a3a] data-[state=active]:text-[#00ff9d]"
              >
                References
              </TabsTrigger>
            </TabsList>

            <TabsContent value="details" className="space-y-6">
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-bold font-mono text-[#00ff9d] mb-2 flex items-center">
                    <AlertTriangle className="mr-2 h-5 w-5" />
                    Description
                  </h3>
                  <p className="text-gray-300 font-mono text-sm">{exploit.description}</p>
                </div>

                <Separator className="border-[#2a2a3a]" />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-lg font-bold font-mono text-[#00ff9d] mb-2 flex items-center">
                      <FileCode className="mr-2 h-5 w-5" />
                      Exploit Details
                    </h3>
                    <div className="space-y-3">
                      <div className="flex items-start">
                        <span className="text-gray-400 font-mono text-sm w-24 flex-shrink-0">Type:</span>
                        <div>
                          <span className="text-gray-300 font-mono text-sm">{exploit.type.toUpperCase()}</span>
                          <p className="text-gray-500 font-mono text-xs mt-1">{getTypeDescription(exploit.type)}</p>
                        </div>
                      </div>
                      <div className="flex items-start">
                        <span className="text-gray-400 font-mono text-sm w-24 flex-shrink-0">Platform:</span>
                        <span className="text-gray-300 font-mono text-sm">{exploit.platform}</span>
                      </div>
                      <div className="flex items-start">
                        <span className="text-gray-400 font-mono text-sm w-24 flex-shrink-0">Date:</span>
                        <span className="text-gray-300 font-mono text-sm">{exploit.date}</span>
                      </div>
                      <div className="flex items-start">
                        <span className="text-gray-400 font-mono text-sm w-24 flex-shrink-0">Author:</span>
                        <span className="text-gray-300 font-mono text-sm">{exploit.author}</span>
                      </div>
                      <div className="flex items-start">
                        <span className="text-gray-400 font-mono text-sm w-24 flex-shrink-0">CVE:</span>
                        <span className="text-gray-300 font-mono text-sm">{exploit.cve || "No CVE assigned"}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-bold font-mono text-[#00ff9d] mb-2 flex items-center">
                      <Tag className="mr-2 h-5 w-5" />
                      Tags
                    </h3>
                    <div className="flex flex-wrap gap-2">
                      {exploit.tags.map((tag, index) => (
                        <Badge
                          key={index}
                          variant="outline"
                          className="font-mono text-gray-300 border-[#2a2a3a] hover:bg-[#2a2a3a] cursor-pointer"
                        >
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="code">
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-lg font-bold font-mono text-[#00ff9d] flex items-center">
                    <FileCode className="mr-2 h-5 w-5" />
                    Exploit Code
                  </h3>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={copyToClipboard}
                      className="font-mono border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a] hover:text-white"
                    >
                      {copied ? (
                        <>
                          <Check className="mr-2 h-4 w-4 text-green-400" />
                          Copied
                        </>
                      ) : (
                        <>
                          <Copy className="mr-2 h-4 w-4" />
                          Copy Code
                        </>
                      )}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={downloadExploit}
                      className="font-mono border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a] hover:text-white"
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Download
                    </Button>
                  </div>
                </div>

                <div className="p-4 bg-[#0a0a0c] border border-[#2a2a3a] rounded-md overflow-x-auto">
                  <pre className="font-mono text-sm text-gray-300 whitespace-pre-wrap">{exploit.code}</pre>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="references">
              <div className="space-y-4">
                <h3 className="text-lg font-bold font-mono text-[#00ff9d] mb-2 flex items-center">
                  <Globe className="mr-2 h-5 w-5" />
                  References & Resources
                </h3>

                <div className="p-4 bg-[#0a0a0c] border border-[#2a2a3a] rounded-md">
                  <ul className="space-y-3">
                    {exploit.cve && (
                      <li className="font-mono text-sm">
                        <span className="text-gray-400">CVE Details:</span>{" "}
                        <a
                          href={`https://nvd.nist.gov/vuln/detail/${exploit.cve}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-[#00b8ff] hover:text-[#00ff9d] transition-colors"
                        >
                          {exploit.cve} - National Vulnerability Database
                        </a>
                      </li>
                    )}
                    <li className="font-mono text-sm">
                      <span className="text-gray-400">Platform:</span>{" "}
                      <a
                        href={`https://www.google.com/search?q=${encodeURIComponent(
                          exploit.platform + " security vulnerabilities",
                        )}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-[#00b8ff] hover:text-[#00ff9d] transition-colors"
                      >
                        {exploit.platform} Security Resources
                      </a>
                    </li>
                    <li className="font-mono text-sm">
                      <span className="text-gray-400">Exploit Type:</span>{" "}
                      <a
                        href={`https://www.google.com/search?q=${encodeURIComponent(
                          exploit.type + " exploitation techniques",
                        )}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-[#00b8ff] hover:text-[#00ff9d] transition-colors"
                      >
                        {exploit.type.toUpperCase()} Exploitation Techniques
                      </a>
                    </li>
                    <li className="font-mono text-sm">
                      <span className="text-gray-400">Related Exploits:</span>{" "}
                      <Link
                        href={`/exploits?platform=${encodeURIComponent(exploit.platform)}`}
                        className="text-[#00b8ff] hover:text-[#00ff9d] transition-colors"
                      >
                        More {exploit.platform} Exploits
                      </Link>
                    </li>
                  </ul>
                </div>

                <div className="p-4 bg-[#1a1a1a] border border-[#2a2a3a] rounded-md">
                  <h4 className="font-mono text-[#00ff9d] mb-2">Disclaimer</h4>
                  <p className="font-mono text-sm text-gray-300">
                    This exploit is provided for educational and research purposes only. The use of this exploit against
                    systems without explicit permission is illegal and unethical. Always ensure you have proper
                    authorization before testing any security vulnerabilities.
                  </p>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  )
}
