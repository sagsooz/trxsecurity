"use client"

import { useState, useEffect } from "react"
import { Search, Filter, AlertTriangle, X } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { exploits, type Exploit } from "@/lib/exploits-data"
import ExploitCard from "./exploit-card"

export default function ExploitsList() {
  const [searchQuery, setSearchQuery] = useState("")
  const [filteredExploits, setFilteredExploits] = useState<Exploit[]>(exploits)
  const [activeType, setActiveType] = useState<string>("all")
  const [activePlatform, setActivePlatform] = useState<string>("")
  const [activeTags, setActiveTags] = useState<string[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [showFilters, setShowFilters] = useState(false)

  // Get unique platforms
  const platforms = Array.from(new Set(exploits.map((exploit) => exploit.platform)))

  // Get all tags
  const allTags = Array.from(new Set(exploits.flatMap((exploit) => exploit.tags))).sort()

  useEffect(() => {
    // Simulate loading data
    const timer = setTimeout(() => {
      setIsLoading(false)
    }, 1000)

    return () => clearTimeout(timer)
  }, [])

  useEffect(() => {
    filterExploits(searchQuery, activeType, activePlatform, activeTags)
  }, [searchQuery, activeType, activePlatform, activeTags])

  const filterExploits = (query: string, type: string, platform: string, tags: string[]) => {
    let result = exploits

    // Apply search query filter
    if (query) {
      const lowerQuery = query.toLowerCase()
      result = result.filter(
        (exploit) =>
          exploit.title.toLowerCase().includes(lowerQuery) ||
          exploit.description.toLowerCase().includes(lowerQuery) ||
          exploit.platform.toLowerCase().includes(lowerQuery) ||
          (exploit.cve && exploit.cve.toLowerCase().includes(lowerQuery)) ||
          exploit.tags.some((tag) => tag.toLowerCase().includes(lowerQuery)),
      )
    }

    // Apply type filter
    if (type !== "all") {
      result = result.filter((exploit) => exploit.type === type)
    }

    // Apply platform filter
    if (platform) {
      result = result.filter((exploit) => exploit.platform === platform)
    }

    // Apply tags filter
    if (tags.length > 0) {
      result = result.filter((exploit) => tags.every((tag) => exploit.tags.includes(tag)))
    }

    setFilteredExploits(result)
  }

  const handleSearch = (query: string) => {
    setSearchQuery(query)
  }

  const handleTypeChange = (type: string) => {
    setActiveType(type)
  }

  const handlePlatformChange = (platform: string) => {
    setActivePlatform(platform)
  }

  const handleTagToggle = (tag: string) => {
    setActiveTags((prevTags) => (prevTags.includes(tag) ? prevTags.filter((t) => t !== tag) : [...prevTags, tag]))
  }

  const clearFilters = () => {
    setActiveType("all")
    setActivePlatform("")
    setActiveTags([])
    setSearchQuery("")
  }

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center py-20">
        <div className="w-16 h-16 border-4 border-t-[#00ff9d] border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin mb-4"></div>
        <p className="text-[#00ff9d] font-mono text-lg">Loading exploits database...</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row gap-4">
        <div className="relative flex-grow">
          <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <Search className="h-5 w-5 text-gray-400" />
          </div>
          <Input
            type="text"
            placeholder="Search exploits by title, description, CVE, platform, or tags..."
            value={searchQuery}
            onChange={(e) => handleSearch(e.target.value)}
            className="pl-10 font-mono bg-[#1a1a1a] border-[#2a2a3a] text-gray-200 h-12"
          />
        </div>
        <Button
          variant="outline"
          className={`font-mono border-[#2a2a3a] ${
            showFilters ? "text-[#00ff9d] bg-[#2a2a3a]" : "text-gray-300"
          } hover:bg-[#2a2a3a] hover:text-[#00ff9d] h-12 px-4`}
          onClick={() => setShowFilters(!showFilters)}
        >
          <Filter className="mr-2 h-5 w-5" />
          Filters {activeTags.length > 0 || activePlatform ? `(${activeTags.length + (activePlatform ? 1 : 0)})` : ""}
        </Button>
      </div>

      {showFilters && (
        <div className="p-4 bg-[#1a1a1a] border border-[#2a2a3a] rounded-md">
          <div className="flex flex-col md:flex-row justify-between gap-4 mb-4">
            <div className="w-full md:w-1/3">
              <label className="block text-sm font-mono text-gray-400 mb-2">Exploit Type</label>
              <Tabs defaultValue={activeType} onValueChange={handleTypeChange} className="w-full">
                <TabsList className="grid grid-cols-3 bg-[#0a0a0c]">
                  <TabsTrigger
                    value="all"
                    className="font-mono data-[state=active]:bg-[#2a2a3a] data-[state=active]:text-[#00ff9d]"
                  >
                    All
                  </TabsTrigger>
                  <TabsTrigger
                    value="remote"
                    className="font-mono data-[state=active]:bg-[#2a2a3a] data-[state=active]:text-[#00ff9d]"
                  >
                    Remote
                  </TabsTrigger>
                  <TabsTrigger
                    value="local"
                    className="font-mono data-[state=active]:bg-[#2a2a3a] data-[state=active]:text-[#00ff9d]"
                  >
                    Local
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            <div className="w-full md:w-1/3">
              <label className="block text-sm font-mono text-gray-400 mb-2">Platform</label>
              <Select value={activePlatform} onValueChange={handlePlatformChange}>
                <SelectTrigger className="font-mono bg-[#0a0a0c] border-[#2a2a3a] text-gray-200">
                  <SelectValue placeholder="All Platforms" />
                </SelectTrigger>
                <SelectContent className="font-mono bg-[#1a1a1a] border-[#2a2a3a] text-gray-200 max-h-[300px]">
                  <SelectItem value="all">All Platforms</SelectItem>
                  {platforms.map((platform) => (
                    <SelectItem key={platform} value={platform}>
                      {platform}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="w-full md:w-1/3">
              <div className="flex justify-between items-center mb-2">
                <label className="block text-sm font-mono text-gray-400">Tags</label>
                {activeTags.length > 0 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setActiveTags([])}
                    className="h-6 px-2 text-xs text-gray-400 hover:text-white hover:bg-[#2a2a3a]"
                  >
                    Clear
                  </Button>
                )}
              </div>
              <div className="flex flex-wrap gap-2 p-2 bg-[#0a0a0c] border border-[#2a2a3a] rounded-md max-h-[100px] overflow-y-auto">
                {allTags.map((tag) => (
                  <Badge
                    key={tag}
                    variant={activeTags.includes(tag) ? "default" : "outline"}
                    className={`cursor-pointer font-mono text-xs ${
                      activeTags.includes(tag)
                        ? "bg-[#00ff9d] text-black hover:bg-[#00b8ff]"
                        : "text-gray-300 hover:bg-[#2a2a3a] hover:text-white"
                    }`}
                    onClick={() => handleTagToggle(tag)}
                  >
                    {tag}
                  </Badge>
                ))}
              </div>
            </div>
          </div>

          <div className="flex justify-end">
            <Button
              variant="outline"
              size="sm"
              onClick={clearFilters}
              className="font-mono border-[#2a2a3a] text-gray-300 hover:bg-[#2a2a3a] hover:text-white"
            >
              <X className="mr-1 h-4 w-4" />
              Clear All Filters
            </Button>
          </div>
        </div>
      )}

      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold font-mono flex items-center">
          <AlertTriangle className="mr-2 h-5 w-5 text-[#00ff9d]" />
          <span>Exploits</span>
        </h2>
        <p className="text-gray-400 font-mono text-sm">
          {filteredExploits.length} {filteredExploits.length === 1 ? "exploit" : "exploits"} found
        </p>
      </div>

      {filteredExploits.length > 0 ? (
        <div className="grid grid-cols-1 gap-6">
          {filteredExploits.map((exploit) => (
            <ExploitCard key={exploit.id} exploit={exploit} />
          ))}
        </div>
      ) : (
        <div className="text-center py-20 border border-dashed border-[#2a2a3a] rounded-lg">
          <AlertTriangle className="h-12 w-12 text-gray-500 mx-auto mb-4" />
          <p className="text-gray-400 font-mono text-lg mb-2">No exploits found</p>
          <p className="text-gray-500 font-mono">Try adjusting your search or filter criteria</p>
        </div>
      )}
    </div>
  )
}
